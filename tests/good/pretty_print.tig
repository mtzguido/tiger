let
    type tree = { key: string, left: tree, right: tree }

    function prettyprint (tree:tree) : string =
    let
      var output := ""

      function write (s: string) =
        output := concat(output, s)

      function show (n:int, t:tree) =
        let function indent (s:string) =
          ( for i := 1 to n
            do write (" ");
            output := concat(output, s); write ("\n")
          )
        in if t=nil
              then indent(".")
              else ( indent (t.key) ;
                     show (n+1, t.left) ;
                     show (n+1, t.right)
                   )
        end
    in show (0, tree); output
    end

    var a := tree { key = "a", left = nil, right = nil }
    var b := tree { key = "b", left = nil, right = nil }
    var c := tree { key = "c", left = a, right = b }

    var d := tree { key = "d", left = nil, right = nil }
    var e := tree { key = "e", left = nil, right = nil }
    var f := tree { key = "f", left = d, right = e }

    var g := tree { key = "g", left = c, right = f }
in print(prettyprint(g)); print("\n") end
